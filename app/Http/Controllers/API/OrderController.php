<?php

namespace App\Http\Controllers\API;

use App\BusinessInfo;
use App\Http\Controllers\Controller;
use App\Order;
use App\Coupon;
use App\UsedCoupon;
use App\OrderItem;
use App\Product;
use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Mail;


class OrderController extends Controller
{

    public function make_order(Request $request)
    {
        $user =  Auth::id(); $price=0;
        $new_order=$request->json()->all();
        $order_details = $new_order['order'];
        $items= $new_order['order']['items'];
        $coupon=$order_details['coupon'];

        $order = new Order();
        $order->mobile_user_id = $user;
        $order->address_id = $order_details['address_id'];
        $order->business_id = $order_details['business_id'];
        $order->note = $order_details['note'];

        //find total price
        foreach ($items as $item) {
            $price += ($item['price'] * $item['quantity']);
        }

        //if total price (without coupon) is the same with total price generated by mobile

        if((float)$price!=(float)$order_details['total_price'])
        {
            return response()->json([
                'error' => true,
                'message' => 'An error has occurred. Please try again later',
            ],404);
        }

        if($coupon!="") {
            $coupon_value=Coupon::where('code', $coupon)->value('discount');
            $final_price=$price-$coupon_value;
            $order->coupon=$coupon;
        } else {
            $coupon_value=0;
            $final_price=$price-$coupon_value;
            $order->coupon="";
        }

        $order->total=$final_price;

        if ($order->save()) {
            foreach ($items as $item) {
                $product = Product::find($item['product_id']);
                $orderitem = new OrderItem();
                $orderitem->order_id = $order->id;
                $orderitem->product_id = $item['product_id'];
                $orderitem->name = $product->name;
                $orderitem->price = $item['price'];
                $orderitem->quantity = $item['quantity'];
                $orderitem->subtotal = (float)$item['price'] * (float)$item['quantity'];
//                if($item['size']!='') {
//                    $orderitem->size=$item['size'];
//                }
                $orderitem->save();
            }

            if (Coupon::where('code', $coupon)->exists())
            {
                $coupon_id = Coupon::where('code', $coupon)->value('id');
                if ($coupon_id != null) {
                    Coupon::where('id', $coupon_id)->increment('used_coupons');
                    $usedcoupon = new UsedCoupon();
                    $usedcoupon->mobile_user_id = $user;
                    $usedcoupon->order_id = $order->id;
                    $usedcoupon->coupon_id = $coupon_id;
                    $usedcoupon->code = $coupon;
                    $usedcoupon->save();
                }
            }
            
            $admins=User::where('role',1)->get();
            $datas = array(
                'email' => Auth::user()->email,
                'name' => Auth::user()->name,
                'phone' => Auth::user()->phone,
                'products' => $items,
            );
            foreach ($admins as $admin) {
                Mail::send('emails.order_admin', $datas,function ($message) use ($admin, $user) {
                    $message->from('turbooproject@gmail.com', 'Turboo');
                    $message->to($admin->email)->subject('Turboo');
                });
            }

            return response()->json([
                'error' => false,
                'message' => 'Order was created succesfully',
            ],200);
        } else
            return response()->json([
                'error' => true,
                'message' => 'An error has occurred. Please try again later',
            ],404);
    }

    public function order_history()
    {
        $all_orders=Order::where('mobile_user_id',Auth::id())->get();

        $pending_orders=Order::where('mobile_user_id',Auth::id())->pending()->get();
        $approved_orders=Order::where('mobile_user_id',Auth::id())->approved()->get();

            return response()->json(
                [
                    'error' => false,
                    'all_orders' => $this->order_details($all_orders),
                    'pending_orders' => $this->order_details($pending_orders),
                    'approved_orders' => $this->order_details($approved_orders)
                ],200
            );

    }


    public function cancel_order($id)
    {
        $order=Order::where('id',$id)->where('mobile_user_id',Auth::id())->first();
        if($order) {
            $order->status = 'canceled';
            if ($order->save()) {
                return response()->json(
                    [
                        'error' => false,
                        'message' => 'Order was canceled successfully',
                    ], 200
                );
            } else
                return response()->json([
                    'error' => true,
                    'message' => 'An error has occurred. Please try again later',
                ], 404);
        }

        else
            return response()->json([
                'error' => true,
                'message' => 'An error has occurred. Please try again later',
            ], 404);



    }

    public function order_details($orders){
        $data = array();
        foreach ($orders as $order)
        {
            $data_items=array();
            $items = OrderItem::where('order_id' , $order->id)->get();
            foreach ($items as $item) {
                $obj = [
                    'product_id'=>$item->product_id,
                    'name' => Product::find($item->product_id)->name,
                    'image' => Product::find($item->product_id)->image,
                    'price' => $item->price,
                    'quantity' => $item->quantity
                ];
                array_push($data_items, $obj);
            }
            $object = [
                'order_id' => $order->id,
                'status' => $order->status,
                'total' => $order->total,
                'business_name'=>BusinessInfo::where('user_id',$order->business_id)->value('business_name'),
                'date'=> date('Y-m-d', strtotime($order->created_at)),
                'items' => $data_items,

            ];
            array_push($data, $object);
        }
        return $data;
    }


    public function check_coupon(Request $request)
    {
        $validator = Validator::make($request->all(),
            [
                'coupon' => 'required',
                'business_id' => 'required',
            ]);

        if ($validator->fails())
        {
            return response()->json(['error' => true , 'message' => $validator->errors()->all()[0]]);
        }

        $coupon_id=Coupon::where('code',$request->coupon)->where('business_id',$request->business_id)->value('id');
        if($coupon_id)
        {
            $today=date('Y-m-d');
            $s_date=Coupon::find($coupon_id)->start_date;
            $e_date=Coupon::find($coupon_id)->end_date;
            $start_date=date('Y-m-d',strtotime($s_date));$end_date=date('Y-m-d',strtotime($e_date));

            if($today >=$start_date and $today<=$end_date )
            {
                $nr_coupon = Coupon::where('code', $request->coupon)->value('quantity');
                $used_coupon = Coupon::where('code', $request->coupon)->value('used_coupons');

                if ($used_coupon < $nr_coupon)
                {
                    if (UsedCoupon::where('mobile_user_id', Auth::id())->where('coupon_id', $coupon_id)->exists()) {
                        $object = ['amount' => 0,];
                        return response()->json(['error' => true, 'message' => 'Ju e keni perdorur me perpara kete kupon', 'data' => $object]);
                    } else {
                        $object = [
                            'amount' =>(int) Coupon::where('id', $coupon_id)->value('discount'),];
                        return response()->json(['error' => false, 'message' => 'Kuponi eshte i vlefshem ', 'data' => $object]);
                    }
                } else {
                    $object = ['amount' => 0,];

                    return response()->json(['error' => true, 'message' => 'Ky kupon eshte i zene', 'data' => $object]);}
            }
            else{
                $object = ['amount' => 0,];
                return response()->json(['error' => true, 'message' => 'Ky kupon ka skaduar', 'data' => $object]);
            }
        }

        else
        {
            $object = [
                'amount' => 0,
            ];
            return response()->json(['error' => true, 'message' => 'Ky kupon nuk ekziston','data' => $object]);

        }

    }
}
